{"version":3,"sources":["services/productService.js","App.js","serviceWorker.js","index.js"],"names":["getAll","a","axios","get","res","data","post","cv_text","App","props","state","cv_texts","CVs","showFile","e","console","log","preventDefault","reader","FileReader","onload","text","target","result","addToState","id","readAsText","files","t","file_name","productService","setState","refreshState","render","className","map","row","name","spe","skills","type","onChange","then","arr","this","split","phone","concat","Component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sTAEe,GACXA,OAAO,WAAD,4BAAE,4BAAAC,EAAA,sEACYC,IAAMC,IAAN,gBADZ,cACAC,EADA,yBAEGA,EAAIC,MAAQ,IAFf,2CAAF,kDAAC,GAKPC,KAAK,WAAD,4BAAE,WAAOC,GAAP,SAAAN,EAAA,sEACIC,IAAMI,KAAN,eAA2B,CAACC,YADhC,2CAAF,mDAAC,ICsHMC,G,wDA5EX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAPVC,MAAQ,CACJC,SAAU,GACVC,IAAK,IAIU,EAInBC,SAJmB,uCAIR,WAAOC,GAAP,eAAAb,EAAA,sDACPc,QAAQC,IAAI,QACZF,EAAEG,kBACIC,EAAS,IAAIC,YACZC,OAAP,uCAAgB,WAAON,GAAP,eAAAb,EAAA,sDACNoB,EAAQP,EAAEQ,OAAOC,OACvBR,QAAQC,IAAIK,GACZ,EAAKG,WAAWH,EAAMP,EAAEQ,OAAOG,IAHnB,2CAAhB,sDAKAP,EAAOQ,WAAWZ,EAAEQ,OAAOK,MAAM,IAT1B,2CAJQ,wDAiBnBH,WAAa,SAACI,EAAGC,GACbC,EAAexB,KAAKsB,GACpBb,QAAQC,IAAI,eACZ,EAAKe,UAAS,SAAArB,OAOd,EAAKsB,gBA3BU,EA+BnBC,OAAS,WAEL,OACI,6BACI,yBAAKC,UAAU,gCACX,2BAAOA,UAAU,WACb,+BACA,4BACI,oCACA,qCACA,8CACA,wCAGJ,+BACC,EAAKxB,MAAME,KAAO,EAAKF,MAAME,IAAIuB,KAAK,SAAAC,GAC/B,OACI,4BACI,4BAAKA,EAAIC,MAET,4BAAKD,EAAIE,KACT,4BAAKF,EAAIG,eAYjC,6BAAK,6BAAK,6BAAK,6BACf,yBAAKL,UAAU,OACX,sCACA,2BAAOM,KAAK,OAAQC,SAAU,SAAC3B,GAAD,OAAO,EAAKD,SAASC,SAnEhD,E,gEA5CE,IAAD,OACN,sBAAC,sBAAAb,EAAA,sEACM6B,EAAe9B,SADrB,kFAAD,GAMN0C,MAAK,SAAAC,GACL,EAAKjC,MAAMC,SAAWgC,KAC1BC,KAAKb,UAAS,SAAArB,OAOdkC,KAAKZ,iB,qCAGM,IAAD,OACVY,KAAKlC,MAAMC,SAASwB,KAAI,SAAAP,GACpB,IAAMQ,EAAM,CACRC,KAAMT,EAAErB,QAAQsC,MAAM,MAAM,GAC5BC,MAAOlB,EAAErB,QAAQsC,MAAM,MAAM,GAC7BP,IAAKV,EAAErB,QAAQsC,MAAM,MAAM,GAC3BN,OAAQX,EAAErB,QAAQsC,MAAM,MAAM,IAElC,EAAKd,UAAS,SAAArB,GACV,IAAME,EAAM,EAAKF,MAAME,IAAImC,OAAOX,GAGlC,OADArB,QAAQC,IAAIJ,GACN,CAACA,iB,GAjCLoC,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASrB,OACP,kBAAC,IAAMsB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.9d55f404.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport default {\r\n    getAll: async () => {\r\n        let res = await axios.get(`/api/product`);\r\n        return res.data || [];\r\n    },\r\n\r\n    post: async (cv_text) => {\r\n        await axios.post(`/api/product`, {cv_text});\r\n\r\n    }\r\n}","import React, {Component} from 'react';\nimport productService from './services/productService';\nimport './App.css';\n\nclass App extends Component {\n\n    componentDidMount() {\n        let res = (async () => {\n            return await productService.getAll();\n        })()\n\n\n\n        res.then(arr => {\n            this.state.cv_texts = arr})\n        this.setState(state => {\n            const getProducts = async () => {\n                let res = await productService.getAll();\n                // console.log(res);\n                this.state.cv_texts = res;           }\n\n        })\n        this.refreshState()\n    }\n\n    refreshState(){\n        this.state.cv_texts.map(t=>{\n            const row = {\n                name: t.cv_text.split(\"\\n\")[0],\n                phone: t.cv_text.split(\"\\n\")[1],\n                spe: t.cv_text.split(\"\\n\")[2],\n                skills: t.cv_text.split(\"\\n\")[3]\n            }\n            this.setState(state =>{\n                const CVs = this.state.CVs.concat(row)\n\n                console.log(CVs)\n                return{CVs}\n\n            })\n        })\n\n\n    }\n    state = {\n        cv_texts: [],\n        CVs: []\n\n    }\n\n    constructor(props) {\n        super(props);\n    }\n\n    showFile = async (e) => {\n        console.log(\"read\")\n        e.preventDefault()\n        const reader = new FileReader()\n        reader.onload = async (e) => {\n            const text = (e.target.result)\n            console.log(text)\n            this.addToState(text, e.target.id);\n        };\n        reader.readAsText(e.target.files[0])\n\n    }\n\n    addToState = (t, file_name) => {\n        productService.post(t)\n        console.log(\"Adding ....\")\n        this.setState(state => {\n            const getProducts = async () => {\n                let res = await productService.getAll();\n                // console.log(res);\n                this.state.cv_texts = res;           }\n\n        })\n        this.refreshState();\n\n    }\n\n    render = () => {\n\n        return (\n            <div>\n                <div className=\"container highlight centered\">\n                    <table className=\"striped\">\n                        <thead>\n                        <tr>\n                            <td>Name</td>\n                            <td>Phone</td>\n                            <td>Specialization</td>\n                            <td>Skills</td>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {this.state.CVs && this.state.CVs.map( row => {\n                                return(\n                                    <tr>\n                                        <td>{row.name}</td>\n                                        {/*<td>{row.phone}</td>*/}\n                                        <td>{row.spe}</td>\n                                        <td>{row.skills}</td>\n                                    </tr>\n                                )\n                            }\n\n                        )}\n\n\n                        </tbody>\n\n                    </table>\n                </div>\n                <br/><br/><br/><br/>\n                <div className=\"btn\">\n                    <span>File</span>\n                    <input type=\"file\"  onChange={(e) => this.showFile(e)} />\n                </div>\n\n\n            </div>\n        )\n    }\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState, useEffect } from \"react\";\n//\n// // SERVICES\n// import productService from './services/productService';\n//\n// function App() {\n//     const [products, setproducts] = useState(null);\n//\n//     useEffect(() => {\n//         if(!products) {\n//             getProducts();\n//         }\n//     })\n//\n//     const getProducts = async () => {\n//         let res = await productService.getAll();\n//         console.log(res);\n//         setproducts(res);\n//     }\n//\n//     const renderProduct = product => {\n//         return (\n//             <li key={product._id} className=\"list__item product\">\n//             <h3 className=\"product__name\">{product.name}</h3>\n//             <p className=\"product__description\">{product.description}</p>\n//             </li>\n//     );\n//     };\n//\n//     return (\n//         <div className=\"App\">\n//         <ul className=\"list\">\n//     {(products && products.length > 0) ? (\n//         products.map(product => renderProduct(product))\n//     ) : (\n//         <p>No products found</p>\n// )}\n// </ul>\n//     </div>\n// );\n// }\n//\n// export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}